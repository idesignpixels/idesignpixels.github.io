{"data":{"markdownRemark":{"frontmatter":{"title":"React Portals","date":"Mar 17th, 2018","image":"./react-portals-header-LG.jpg","intro":"Today I look at the new React portals feature that allows you to render modals outside of the parent component."},"html":"<p>React portals were recently added in version 16, this enables you to render children outside of the parent component.</p>\n<blockquote>\n<p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/portals.html\">- React Documentation</a></p>\n<p>What's so great about that?\nWell the most common use cases are going to be components that need to be rendered at a top level but also need to retrieve props from nested parents, a good example is a modal.</p>\n<p>So how do you use this new feature?\nlets render a modal with React portal...</p>\n<p>{% include demo-code-buttons.html %}</p>\n<pre><code class=\"language-html\">&#x3C;!-- index.html -->\n&#x3C;html>\n  &#x3C;body>\n    &#x3C;div id=\"modal-root\">&#x3C;/div>\n    &#x3C;div id=\"app-root\">&#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<pre><code class=\"language-javascript\">// Modal.jsx\nexport default class Modal extends React.Component {\n  componentWillMount() {\n    this.modalRoot = document.getElementById('modal-root');\n  }\n\n  render() {\n    const { show, children, backDropClick } = this.props;\n    if (show) {\n      return ReactDOM.createPortal((\n        &#x3C;div className=\"backdrop\" onClick={backDropClick}>\n          &#x3C;div className=\"modal\" onClick={e => e.stopPropagation()}>\n            {children}\n          &#x3C;/div>\n        &#x3C;/div>\n      ), this.modalRoot);\n    } else {\n      return null;\n    }\n  }\n}\n</code></pre>\n<p>There are a few extras in here that we'll discuss later but the main part is what we're returning if <code>props.show</code> is true.</p>\n<p><code>ReactDOM.createPortal</code> has two parameters the first is a \"renderable React child\" most commonly a html element or react component in this case our modal markup, the second parameter is a DOM element to render the former in which is a div with the id of \"modal-root\" from our index.html.</p>\n<p>Pretty easy right? simply return the <code>ReactDOM.createPortal</code> method with the content and where you want to render it!</p>\n<img src=\"https://i.imgur.com/ruwSbgO.png\" alt=\"React portal modal example\" title=\"React portal modal\" width=\"746\" height=\"522\" />\n<p>So how to create a modal? it depends on the style your after but I'm going with a simple centered box to render a card with header, message, action buttons. It will also need a backdrop that makes the modal \"pop off\" the screen.</p>\n<p>{% include article-adsense.html %}</p>\n<p>So back to those extras you may have noticed in the example.\nWe have the backdrop, a div with the class of \"backdrop\" that's styled the following way.</p>\n<pre><code class=\"language-css\">.backdrop {\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  background-color: rgba(0,0,0,0.5);\n  padding: 16px;\n  z-index: 250;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n</code></pre>\n<p>This makes it behave as a full screen dark translucent overlay that uses flexbox to center it's children on both axis.\nThe other part <code>onClick={backDropClick}</code> is a function passed as a prop that gets called when the backdrop is clicked, in the demo I use it to close the modal by altering the prop passed as show to be false.</p>\n<p>On to the modal itself which is simply styled to contain it children to a specified dimension.</p>\n<pre><code class=\"language-css\">.modal {\n  width: 100%;\n  max-width: 350px;\n  max-height: 200px;\n}\n</code></pre>\n<p>Because we want to reuse modal it simply contains the children prop so that it can be composed with any other components in a modal instance.\nIt does have a \"onClick\" attribute <code>onClick={e => e.stopPropagation()}</code> this is to stop click event bubbling up to the backdrop so now you can click the modal or its children without it closing from <code>props.backDropClick</code>.</p>\n<p>Right! we've created the modal component now we just need to implement it around the app.\nHere I have created an example of how you might do that.</p>\n<pre><code class=\"language-javascript\">/* SomeComponent.jsx */\nexport default class SomeComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.doSomething = this.doSomething.bind(this);\n    this.state = {\n      modal: false,\n    };\n  }\n\n  openModal() {\n    this.setState({ modal: true });\n  }\n\n  closeModal() {\n    this.setState({ modal: false });\n  }\n\n  doSomething() {\n    alert('You did something!');\n  }\n\n  render() {\n    return (\n      &#x3C;Fragment>\n        &#x3C;button onClick={this.openModal}>Do something&#x3C;/button>\n        &#x3C;Modal show={this.state.modal} backDropClick={this.closeModal}>\n          &#x3C;Card title=\"Modal\">\n            &#x3C;CardContent>\n              &#x3C;p>Are you sure you want to do something?&#x3C;/p>\n            &#x3C;/CardContent>\n            &#x3C;CardActions>\n              &#x3C;CardAction label=\"Close\" onClick={this.closeModal} />\n              &#x3C;CardAction label=\"Confirm\" onClick={this.doSomething} />\n            &#x3C;/CardActions>\n          &#x3C;/Card>\n        &#x3C;/Modal>\n      &#x3C;/Fragment>\n    );\n  }\n}\n</code></pre>\n<p>In \"SomeComponent\" we need to use a modal to confirm a user action, so we import and use the modal component, use local state to control the \"show\" prop and give the \"backDropClick\" prop a method to set the show state to false.\nThen we pass what we want to display for the modal, in this case a custom card component that has some actions that we can use to cancel or confirm.</p>\n<p>You may have noticed I used a <a href=\"https://reactjs.org/docs/fragments.html\">Fragment</a> component, if you haven't seen this before don't worry it's just a way of returning a single component that doesn't add additional markup it is not required and you can use whatever you like, you can read more about it <a href=\"https://reactjs.org/docs/fragments.html\">here</a>.</p>\n<p>And there you have it, using React portals to render modals from anywhere in your application! please check out the <a href=\"http://idesignpixels.com/react-portals\">demo</a> and <a href=\"https://github.com/idesignpixels/react-portals\">code</a> for this post for further inspiration including using <a href=\"https://github.com/chenglou/react-motion\">react-motion</a> to add some smooth animations!</p>\n<p>{% include demo-code-buttons.html %}</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"react-portals"}}
{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"ee87e309-379d-5697-bcd1-dff78b712444","frontmatter":{"title":"Styling Input Range","image":"https://i.imgur.com/QDCL5dQ.jpg","author":"Dale","date":"2018-02-04 18:25:23 +0000","intro":"HTML5 input range fields are great but they looks different in every browser, in this post we style them to be uniform across browsers.","categories":"css html"},"html":"<p>The range input was introduced in HTML5 but the style differs wildly between browsers in this post I will talk about how to style this element to look the same in all modern browsers.\nThe idea is to have a friendly looking range input and label that responds to the users input, the user gets updated feedback on focus, hover, and change.</p>\n<pre><code class=\"language-html\">&#x3C;div class=\"rangeWrapper\">\n  &#x3C;div class=\"label\">\n    &#x3C;span>Range &#x3C;/span>\n    &#x3C;output id=\"rangeoutput\">0&#x3C;/output>\n  &#x3C;/div>\n  &#x3C;input\n    id=\"rangeinput\"\n    type=\"range\"\n    value=\"0\"\n    min=0\n    max=100\n    oninput=\"rangeoutput.value = value\"\n  />\n&#x3C;/div>\n</code></pre>\n<p>Here is my markup it is a wrapper thats contains a label div with an output container as a child and an input of type range.\nThe output element can be used to display the value of the range input by using the <code>oninput</code> attribute on the input element and using the id of the output element, in this case <code>rangeoutput.value = value</code>.\nYou can also use the \"onchange\" attribute the same way but the downside to this is that it only updates when the user has released the slider, this means the user can’t see the current value whilst dragging, choose the best one for your use case.</p>\n<p>{% include article-adsense.html %}</p>\n<p>In order to style the range input first you must remove the default browser styles, this is done with <code>appearance: none;</code> on <code>input[type=“range”]</code>, you may need to add browser prefixes for older/unsupported browsers.</p>\n<pre><code class=\"language-css\">.rangeWrapper {\n  position: relative;\n  width: 80%;\n  margin: auto;\n}\n\n.label {\n  font-family: sans-serif;\n  font-size: 1.5em;\n  color: #388E3C;\n  line-height: 2em;\n}\n\ninput[type=\"range\"] {\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  -ms-appearance: none;\n  width: 100%;\n  height: 25px;\n  padding: 3px;\n  border-radius: 15px;\n  background-color: #388E3C;\n  transition: background-color 0.25s ease;\n  outline: none;\n}\n</code></pre>\n<p>This will make the component invisible but it's still there, now you just need to add your custom styles!\nStart by giving it 100% width, some height and a background-color, I have also added border radius.\nWe also want to animate the range track depending on whether its focused or being hovered upon, using css transitions you can easily apply these styles, I have added <code>transition: background-color 0.25s ease;</code> this will animate the track color when it changes.</p>\n<pre><code class=\"language-css\">input[type=\"range\"]:hover {\n  background-color: #4CAF50;\n}\n\ninput[type=\"range\"]:active {\n  background-color: #81C784;\n}\n</code></pre>\n<p>I have set the background color of the track to be lighter on hover and even lighter on active, I like this effect as it feels like the element is waking up as you hover and awake as you use it before going back to sleep again.</p>\n<p>Now for the range 'thumb' this is the part that moves along the track, to style this you have to use some vender prefixes.\nGoing forward I will be using the <code>-webkit</code> prefix for examples but don't forget to add <code>-moz</code> &#x26; <code>-ms</code>, look at the jsbin example for the full code.</p>\n<pre><code class=\"language-css\">input[type=\"range\"]::-webkit-slider-thumb {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 25px;\n  height: 25px;\n  background-color: white;\n  border-radius: 25px;\n  cursor: move;\n  transition: all 0.15s ease;\n}\n</code></pre>\n<p>I've just Made a simple white circle for the thumb but you can do almost anything here even have a background image to add texture.\nThis does look a little boring though so to make it more interesting I've added some animations on <code>:hover</code> &#x26; <code>:active</code>.</p>\n<pre><code class=\"language-css\">input[type=\"range\"]::-webkit-slider-thumb:hover {\n  height: 30px;\n  width: 30px;\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n  -webkit-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb:active {\n  height: 35px;\n  width: 35px;\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n  -webkit-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n}\n</code></pre>\n<p>I have animated the size of the thumb as well as increase the shadow, this gives the effect that it's rising to your finger/cursor when you interact with it.</p>\n<p>Using whats shown here you can quickly theme and customise the range input so that it blends in with your website or apps UI without writing a single line of javascript!.</p>"}},{"node":{"id":"7098e273-9d80-5f39-af86-3d7f4de56f2a","frontmatter":{"title":"iOS Inspector Troubleshoot","image":"https://i.imgur.com/2i0w2l3.jpg","author":"Dale","date":"2018-02-22 20:20:00 +0000","intro":"Having problems with your iOS device disconnecting when your trying to inspect with Safari? in this post we list what could be the cause and how to fix it.","categories":"safari ios osx xcode"},"html":"<p>One great thing about testing browser based apps or websites on the iPhone or iPad is that you can inspect it using Safari inspector.</p>\n<h2>Getting started</h2>\n<ol>\n<li>\n<p>In OSX open Safari and go to <strong>\"Safari > preferences > advanced\"</strong> and tick <strong>\"Show develop menu in menu bar\"</strong>.</p>\n</li>\n<li>\n<p>In iOS go to <strong>\"Settings > Safari > Advanced\"</strong> and turn on web inspector.</p>\n</li>\n<li>\n<p>Inspect your device by plugging it in to your mac and going to <strong>\"Develop > your-device-name\"</strong> in the toolbar.</p>\n</li>\n</ol>\n<h2>The problem</h2>\n<p>Unfortunately if you do this for some time you will undoubtably run in to an issue where you go to inspect the device then safari disconnects from it (no longer in the menu).</p>\n<p>{% include article-adsense.html %}</p>\n<p>You may have tried to restart Safari or re-plugin the device, however this doesn't always work.\nIn this article I talk about several methods that I have tried to remedy this problem.</p>\n<ol>\n<li>\n<p>Update both OSX and iOS versions of Safari\nI have found after having the latest of both versions it started working, this could be down to debugging incompatibilities between safari versions.</p>\n</li>\n<li>\n<p>Check that web inspector in iOS is enabled,\nit has been known that this setting can be switched off after an upgrade or perhaps your testing on a different device and forgot to enable it.\nOn your iOS device check in <strong>\"settings > safari > advanced > web inspector\"</strong> and make sure it's enabled.</p>\n</li>\n<li>\n<p>Check the port you are connected to\nI have had mine plugged into a cheap hub / via apple keyboard / monitor hub and found that going directly into the mac is much more reliable.</p>\n</li>\n<li>\n<p>Are you using a good quality cable?\nBetter quality / official cables that aren't worn out have better reliability when in debug, I have experienced moving a bad cable around and it disconnecting/connecting in Safari.</p>\n</li>\n<li>\n<p>Other notable observations\nOther people have commented that making sure cookies are enabled in safari, enabling private mode and trying whilst Xcode is open have affected the reliability of this, although I haven't seen this myself it may help others to try.</p>\n</li>\n</ol>\n<p>Being able to inspect your device in Safari is a great tool but it can be frustrating when it doesn't work as expected, hopefully some of the tips above will work for you and you will spend less time debugging debugging!</p>"}},{"node":{"id":"6932e572-aff7-5aba-aad4-b3fa92e97f19","frontmatter":{"title":"React Portals","image":"https://i.imgur.com/204oY5E.jpg","author":"Dale","date":"2018-03-17 20:20:00 +0000","intro":"Today I look at the new React portals feature that allows you to render modals outside of the parent component.","categories":"react js es6"},"html":"<p>React portals were recently added in version 16, this enables you to render children outside of the parent component.</p>\n<blockquote>\n<p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/portals.html\">- React Documentation</a></p>\n<p>What's so great about that?\nWell the most common use cases are going to be components that need to be rendered at a top level but also need to retrieve props from nested parents, a good example is a modal.</p>\n<p>So how do you use this new feature?\nlets render a modal with React portal...</p>\n<p>{% include demo-code-buttons.html %}</p>\n<pre><code class=\"language-html\">&#x3C;!-- index.html -->\n&#x3C;html>\n  &#x3C;body>\n    &#x3C;div id=\"modal-root\">&#x3C;/div>\n    &#x3C;div id=\"app-root\">&#x3C;/div>\n  &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<pre><code class=\"language-javascript\">// Modal.jsx\nexport default class Modal extends React.Component {\n  componentWillMount() {\n    this.modalRoot = document.getElementById('modal-root');\n  }\n\n  render() {\n    const { show, children, backDropClick } = this.props;\n    if (show) {\n      return ReactDOM.createPortal((\n        &#x3C;div className=\"backdrop\" onClick={backDropClick}>\n          &#x3C;div className=\"modal\" onClick={e => e.stopPropagation()}>\n            {children}\n          &#x3C;/div>\n        &#x3C;/div>\n      ), this.modalRoot);\n    } else {\n      return null;\n    }\n  }\n}\n</code></pre>\n<p>There are a few extras in here that we'll discuss later but the main part is what we're returning if <code>props.show</code> is true.</p>\n<p><code>ReactDOM.createPortal</code> has two parameters the first is a \"renderable React child\" most commonly a html element or react component in this case our modal markup, the second parameter is a DOM element to render the former in which is a div with the id of \"modal-root\" from our index.html.</p>\n<p>Pretty easy right? simply return the <code>ReactDOM.createPortal</code> method with the content and where you want to render it!</p>\n<img src=\"https://i.imgur.com/ruwSbgO.png\" alt=\"React portal modal example\" title=\"React portal modal\" width=\"746\" height=\"522\" />\n<p>So how to create a modal? it depends on the style your after but I'm going with a simple centered box to render a card with header, message, action buttons. It will also need a backdrop that makes the modal \"pop off\" the screen.</p>\n<p>{% include article-adsense.html %}</p>\n<p>So back to those extras you may have noticed in the example.\nWe have the backdrop, a div with the class of \"backdrop\" that's styled the following way.</p>\n<pre><code class=\"language-css\">.backdrop {\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  background-color: rgba(0,0,0,0.5);\n  padding: 16px;\n  z-index: 250;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n</code></pre>\n<p>This makes it behave as a full screen dark translucent overlay that uses flexbox to center it's children on both axis.\nThe other part <code>onClick={backDropClick}</code> is a function passed as a prop that gets called when the backdrop is clicked, in the demo I use it to close the modal by altering the prop passed as show to be false.</p>\n<p>On to the modal itself which is simply styled to contain it children to a specified dimension.</p>\n<pre><code class=\"language-css\">.modal {\n  width: 100%;\n  max-width: 350px;\n  max-height: 200px;\n}\n</code></pre>\n<p>Because we want to reuse modal it simply contains the children prop so that it can be composed with any other components in a modal instance.\nIt does have a \"onClick\" attribute <code>onClick={e => e.stopPropagation()}</code> this is to stop click event bubbling up to the backdrop so now you can click the modal or its children without it closing from <code>props.backDropClick</code>.</p>\n<p>Right! we've created the modal component now we just need to implement it around the app.\nHere I have created an example of how you might do that.</p>\n<pre><code class=\"language-javascript\">/* SomeComponent.jsx */\nexport default class SomeComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.doSomething = this.doSomething.bind(this);\n    this.state = {\n      modal: false,\n    };\n  }\n\n  openModal() {\n    this.setState({ modal: true });\n  }\n\n  closeModal() {\n    this.setState({ modal: false });\n  }\n\n  doSomething() {\n    alert('You did something!');\n  }\n\n  render() {\n    return (\n      &#x3C;Fragment>\n        &#x3C;button onClick={this.openModal}>Do something&#x3C;/button>\n        &#x3C;Modal show={this.state.modal} backDropClick={this.closeModal}>\n          &#x3C;Card title=\"Modal\">\n            &#x3C;CardContent>\n              &#x3C;p>Are you sure you want to do something?&#x3C;/p>\n            &#x3C;/CardContent>\n            &#x3C;CardActions>\n              &#x3C;CardAction label=\"Close\" onClick={this.closeModal} />\n              &#x3C;CardAction label=\"Confirm\" onClick={this.doSomething} />\n            &#x3C;/CardActions>\n          &#x3C;/Card>\n        &#x3C;/Modal>\n      &#x3C;/Fragment>\n    );\n  }\n}\n</code></pre>\n<p>In \"SomeComponent\" we need to use a modal to confirm a user action, so we import and use the modal component, use local state to control the \"show\" prop and give the \"backDropClick\" prop a method to set the show state to false.\nThen we pass what we want to display for the modal, in this case a custom card component that has some actions that we can use to cancel or confirm.</p>\n<p>You may have noticed I used a <a href=\"https://reactjs.org/docs/fragments.html\">Fragment</a> component, if you haven't seen this before don't worry it's just a way of returning a single component that doesn't add additional markup it is not required and you can use whatever you like, you can read more about it <a href=\"https://reactjs.org/docs/fragments.html\">here</a>.</p>\n<p>And there you have it, using React portals to render modals from anywhere in your application! please check out the <a href=\"http://idesignpixels.com/react-portals\">demo</a> and <a href=\"https://github.com/idesignpixels/react-portals\">code</a> for this post for further inspiration including using <a href=\"https://github.com/chenglou/react-motion\">react-motion</a> to add some smooth animations!</p>\n<p>{% include demo-code-buttons.html %}</p>"}},{"node":{"id":"69496676-fcfc-5377-98fe-15399eea5db3","frontmatter":{"title":"AdSense in Jekyll","image":"https://i.imgur.com/22IMui4.jpg","author":"Dale","date":"2018-04-01 12:30:00 +0000","intro":"How to add Google AdSense to your Jekyll site the right way.","categories":"adsense jekyll"},"html":"<p>Jekyll is a great way to write a blog because it's quick to get started, easy to maintain and if like myself you use <a href=\"https://pages.github.com/\">Github Pages</a> it's also free to host.\nBut how do you start monetising your new blog to get some passive income from your readers?</p>\n<p>There are many ways to do this with ads and affiliate marketing but probably the most popular is Google AdSense, it gives you tons of analytics and also offers plenty of customisation so that it looks and feels like part of your site.</p>\n<p>If you don't have and AdSense account already and have only just started your blog or haven't yet created much content you may find this affects your application for an account as they require that you have enough content and not be \"under construction\". I found that a few blog posts was enough to get me accepted.</p>\n<p>If you haven't got an AdSense account yet sign up here <a href=\"https://www.google.co.uk/adsense\">google.co.uk/adsense</a></p>\n<p>When you first sign up for Google AdSense you will be told to add some script just before the closing head tag, You can just add this straight into your head include however there is a much nicer way to do this that can also make it easier for adding custom \"ad units\", more on that later.</p>\n<pre><code class=\"language-yaml\"># _config.yml\ngoogle_adsense: ca-pub-0000000000000000\n</code></pre>\n<p>Start by adding a global config setting called \"google<em>adsense\" to your config file.\nIn the code that AdSense provides you'll find you're publisher ID that starts with \"ca-pub\", you can also find this in AdSense by going to Settings > Account > Account information.\nAdd this as a string to your \"google</em>adsense\" setting.</p>\n<pre><code class=\"language-html\">&#x3C;!-- _includes/google-adsense.html -->\n&#x3C;script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\">&#x3C;/script>\n&#x3C;script>\n(adsbygoogle = window.adsbygoogle || []).push({\n  google_ad_client: \"{{ site.google_adsense }}\",\n  enable_page_level_ads: true\n});\n&#x3C;/script>\n</code></pre>\n<p>Next create a new google-adsense.html in your includes then paste the code that AdSense provided. Replace your publisher ID with the global setting you created earlier.</p>\n<p>{% raw %}</p>\n<pre><code class=\"language-html\">&#x3C;!-- _includes/head.html -->\n&#x3C;head>\n  &#x3C;!-- ... -->\n  {% if jekyll.environment == 'production' and page.layout == 'post' and site.google_adsense %}\n  {% include google-adsense.html %}\n  {% endif %}\n&#x3C;/head>\n</code></pre>\n<p>{% endraw %}</p>\n<p>Now in your head you can include the \"google-adsense.html\".\nThis by it self is enough to get AdSense working in your site and if you look at the template above it will only display in production environment on blog posts not on contact pages etc.\nIf all went well you should see an ad like the one for this article below.</p>\n<p>{% include article-adsense.html %}</p>\n<p>The above example uses \"auto ads\" which lets google automatically place ads where it thinks is best, you do have some control over this but the idea with \"auto ads\" is to let google take care of placement and ad type for you.\nIf this is fine for you then great you are done! however I prefer to have a little more control over ads which is why I'm also going to show how I prefer to do it.</p>\n<img src=\"https://i.imgur.com/wCilP5r.jpg\" alt=\"Google ad unit templates\" title=\"Google ad unit templates\" width=\"800\" height=\"347\" />\n<p>I prefer to add my own \"ad unit\", there are a few to choose from but the most popular are \"in-article ads\" and \"text &#x26; display ads\" Listing all of the difference goes beyond the scope of this article so although not a hard rule I'll just say if you want ads in your content for example half way through your blog post use \"in-article ads\" otherwise if you wanted it at the start, end or even in a sidebar use \"text &#x26; display ads\".</p>\n<img src=\"https://i.imgur.com/XGM9tEl.jpg\" alt=\"Google ad unit create\" title=\"Google ad unit create\" width=\"800\" height=\"520\" />\n<p>If you create a new ad unit select the type you want, I'm going to use an \"in-article ad\" in this example, You will see a page that lets you customise the look and feel, adjust these settings to meet your needs and click \"Save and get code\".</p>\n<p>This will give you a code snippet similar to the previous auto ads example, repeat the same steps as above (create a include with code snippet, replace your publisher id with the \"google_adsense\" config variable).</p>\n<p>{% raw %}</p>\n<pre><code class=\"language-html\">&#x3C;!-- _includes/article-adsense.html -->\n{% if jekyll.environment == 'production' and page.layout == 'post' and site.google_adsense %}\n  &#x3C;script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\">&#x3C;/script>\n  &#x3C;ins class=\"adsbygoogle\"\n  style=\"display:block; text-align:center;\"\n  data-ad-layout=\"in-article\"\n  data-ad-format=\"fluid\"\n  data-ad-client=\"{{ site.google_adsense }}\"\n  data-ad-slot=\"9200453742\">&#x3C;/ins>\n  &#x3C;script>\n    (adsbygoogle = window.adsbygoogle || []).push({});\n  &#x3C;/script>\n{% endif %}\n</code></pre>\n<p>{% endraw %}</p>\n<p>I have added the environment and page layout check inside the include instead of where I use it, this is because we're going to be putting this include in the middle of blog posts and want to minimise the amount of unrelated logic and abstract the ad code away into this include.</p>\n<p>You may have also noticed that the first script tag is the same as the one from the auto ads snippet, I recommend that whether or not you also use auto ads to only include this script tag once in the head. This is because you may decide to have more than one ad in a post which means this include would have included it more than once.</p>\n<pre><code class=\"language-html\">&#x3C;!-- _includes/head.html -->\n&#x3C;script async src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\">&#x3C;/script>\n</code></pre>\n<p>{% raw %}</p>\n<pre><code class=\"language-html\">&#x3C;!-- _includes/article-adsense.html -->\n{% if jekyll.environment == 'production' and page.layout == 'post' and site.google_adsense %}\n  &#x3C;ins class=\"adsbygoogle\"\n  style=\"display:block; text-align:center;\"\n  data-ad-layout=\"in-article\"\n  data-ad-format=\"fluid\"\n  data-ad-client=\"{{ site.google_adsense }}\"\n  data-ad-slot=\"9200453742\">&#x3C;/ins>\n  &#x3C;script>\n    (adsbygoogle = window.adsbygoogle || []).push({});\n  &#x3C;/script>\n{% endif %}\n</code></pre>\n<pre><code class=\"language-html\">&#x3C;!-- _posts/my-blog-post.md -->\n&#x3C;p>Lorem ipsum dolor sit amet, consectetur adipiscing...&#x3C;/p>\n{% include article-adsense.html %}\n&#x3C;p>Donec tristique, dui ac interdum...&#x3C;/p>\n</code></pre>\n<p>{% endraw %}</p>\n<p>Next you just include \"article-adsense.html\" anywhere you want to place an ad.\nIf you wanted to try out other ad units you can follow the same steps and create new includes for them and have full control over where they are placed.</p>\n<p>Congratulations! you have Google AdSense working now you just need to promote your blog posts to get more people reading them, the more quality traffic you have on your site the higher your potential earnings can be, who knows perhaps you can earn enough to cover your coffee addiction or if your lucky it could be even be your primary income!</p>"}},{"node":{"id":"241d7bde-998b-5ea8-892d-c174944f90cc","frontmatter":{"title":"Higher Order Functions","image":"https://i.imgur.com/qHXdMhE.jpg","author":"Dale","date":"2018-05-10 20:20:00 +0000","intro":"A post that tries to help demystify how higher order functions work by looking at ones you probably already use.","categories":"js es6"},"html":"<p>When you first see higher order functions and how they were written it can feel a little intimidating especially if you're not fully acclimated to es6 syntax. Reading that they're \"functions that return functions\", \"functions that modify other functions\", \"functions that accept functions as arguments\" seeing code like <code>isLessThan = x => y => y &#x3C; x;</code> or <code>isLessThan(a)(b)</code>.</p>\n<p>What some people don't realise is that they're probably already using higher order functions, the Array primitive has some higher order methods like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce</a> which are commonly used to manipulate lists in front end frameworks.</p>\n<p>If you have used some of these you may have even combined them like this trivial example that returns a list of female user emails</p>\n<pre><code class=\"language-javascript\">const femEmailList = myUsers.filter(usr => user.gender === 'female')\n  .map(femUsr => femUsr.email);\n</code></pre>\n<p>This is known as function composition where the result of one function becomes the input of the next and so on, this is a core concept in functional programming and allows you to compose smaller functions into bigger ones.</p>\n<p>Let's go one step further, I often find the easiest way to learn how something works is to take it apart and analyse it piece by piece, so lets rebuild these methods and replicate how they work.</p>\n<h3>map</h3>\n<p>This method is a pure function that iterates through an array and returns a new array, it takes a function for the first argument which it calls with each item in the array and returns a new array with the functions results, confusing? take a look at the example below.</p>\n<p>You may have a list of user objects that you need to get email addresses from, lets get an array of user emails with map:</p>\n<pre><code class=\"language-javascript\">const emailList = myUsers.map(user => user.email);\n</code></pre>\n<p>map is part of the array prototype which means any array will have this method available to it but lets recreate the functionality of map in a custom function called \"iDesignMap\".</p>\n<pre><code class=\"language-javascript\">const iDesignMap = arrayToMap => funcToRun => {\n  let newArray = [];\n  for (let i = 0; arrayToMap.length > i; i++) {\n    newArray.push(funcToRun(arrayToMap[i], i, arrayToMap));\n  }\n  return newArray;\n};\n\nconst emailList = iDesignMap(myUsers)(user => user.email);\n</code></pre>\n<p>This may look complicated at first but just concentrate at the bottom where \"iDesignMap\" is called.\nIn functional programming languages functions are values, we assign the function \"iDesignMap\" to the constant \"emailList\". \"iDesignMap\" takes an array \"myUsers\" and returns a function (itself) that takes another function <code>user => user.email</code> as an argument which is uses internally to return a new array.</p>\n<p>\"iDesignMap\" iterates over the array \"arrayToMap\" and calls \"funcToRun\" with each value, index and the original array. The returned result gets pushed into a new array which gets returned at the end.</p>\n<p>Another common use case is where you take an array of data and map to DOM elements, for example you may want to display a list of comments in React for example it would look like this.</p>\n<pre><code class=\"language-javascript\">render() {\n  const { comments } = this.props;\n  return (\n    &#x3C;ul>\n      {comments.map(comment => (\n        &#x3C;li>{comment.body}&#x3C;/li>\n      )}\n    &#x3C;/ul>\n  );\n}\n</code></pre>\n<p>{% include article-adsense.html %}</p>\n<h3>filter</h3>\n<p>Filter although similar to map is critically different as it returns a new filtered version of the original array rather than transforming each value.</p>\n<pre><code class=\"language-javascript\">const maleUsers = myUsers.filter(user => user.gender === 'male');\n</code></pre>\n<p>The function argument must return a boolean, if it returns true for that array item it will be returned in the new array.</p>\n<p>Lets recreate filter as a custom function.</p>\n<pre><code class=\"language-javascript\">const iDesignFilter = arrayToMap => funcToRun => {\n  let newArray = [];\n  for (let i = 0; arrayToMap.length > i; i++) {\n    if (funcToRun(arrayToMap[i], i, arrayToMap)) {\n      newArray.push(arrayToMap[i]);\n    }\n  }\n  return newArray;\n};\n\nconst isMale = user => user.gender === 'male';\nconst maleUsers = iDesignFilter(myUsers)(isMale);\n</code></pre>\n<p>\"iDesignFilter\" takes an array \"arrayToMap\" and returns a function that takes another function \"funcToRun\" as an argument, when \"iDesignFilter\" iterates over \"arrayToMap\" it calls \"funcToRun\" with each value, index and the original array then finally returns a new filtered array.</p>\n<h3>It still doesn't look right...</h3>\n<p>The main difference between these custom functions and the native counterparts is that the custom functions are not part of the array prototype and therefore must be passed the array, however you can add them to the prototype and use \"this\" in place of \"arrayToMap\".</p>\n<pre><code class=\"language-javascript\">Array.prototype.iDesignFilter = function(funcToRun) {\n  let newArray = [];\n  for (let i = 0; this.length > i; i++) {\n    if (funcToRun(this[i], i, this)) {\n      newArray.push(this[i]);\n    }\n  }\n  return newArray;\n  }\n\n  var maleUsers = myUsers.iDesignFilter(user => user.gender === 'male');\n</code></pre>\n<p>After you add this method to the prototype it will be available to all Array types just like \"map\" and \"filter\".\nOf course this example is trivial because the methods already exist but now you can understand how higher order functions work, where they are used and how they are integrated into the language already.</p>"}},{"node":{"id":"dc998b8a-bb77-5d27-9919-56a6bc6c56ce","frontmatter":{"title":"10 Things a Front End Developer Should Know in Terminal","image":"https://i.imgur.com/pPHcil7.jpg","author":"Dale","date":"2018-05-14 20:20:00 +0000","intro":"Many front end developers shy away from the command line preferring GUI alternatives however it's now a common requirement in the workplace, here are 10 things every front end developer should know in terminal.","categories":"terminal osx"},"html":"<p>The command line can seem very intimidating to a new user and some developers will keep it at and arms distance because it conjures up images of movies such as the Matrix, streams of glowing green code that only computers and \"the one\" dare try to understand. The reality however is rather anti-climatic as after you learn some commands it becomes a civilised tool which can liberate you from sometimes clunky and bloated GUI tools.\nThis is by no means an exhaustive list of things front end developers should know on the command line but it is a good starting point and will make several areas of your development workflow smoother as well as being able to communicate with other command line users</p>\n<p><strong>These are commands are for macOS users but should also work for Linux, if you are a windows user the same concepts still apply but the commands will differ.</strong></p>\n<h2>Navigation</h2>\n<p>Most commands you run in terminal are going to involve a path to a specific file or directory but you won't always know where what you're looking for is so you often need to navigate your filesystem to seek out a file.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n<th align=\"center\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cd</td>\n<td align=\"center\">Changes directory to the provided path.</td>\n<td align=\"center\">cd sites/my-awesome-site</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td align=\"center\">Shows you the path of the working directory.</td>\n<td align=\"center\">pwd</td>\n</tr>\n<tr>\n<td>ls</td>\n<td align=\"center\">Lists contents of current directory or provided path.</td>\n<td align=\"center\">ls sites</td>\n</tr>\n</tbody>\n</table>\n<h2>Creation</h2>\n<p>Creating files and folders is a breeze using the command line, just a few commands can flesh out a new project structure, say goodbye to right clicking in finder or your IDE.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n<th align=\"center\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>touch</td>\n<td align=\"center\">Creates a file</td>\n<td align=\"center\">touch index.html</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td align=\"center\">Creates a directory</td>\n<td align=\"center\">mkdir assets</td>\n</tr>\n</tbody>\n</table>\n<p>With these commands you can pass though multiple names to create several directories/files at once,\nfor example:</p>\n<pre><code>mkdir my-site\ncd my-site\nmkdir styles scripts images\ntouch index.html\n</code></pre>\n<h2>Move, Copy, Rename</h2>\n<p>Dragging and dropping files in the wrong place by mistake happens to me more than I care to admit but because these commands specify a path you can be sure you always know where they came from and where they're going.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n<th align=\"center\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mv</td>\n<td align=\"center\">Moves a file or changes its name.</td>\n<td align=\"center\">mv file1.txt dir2/file2.txt</td>\n</tr>\n<tr>\n<td>cp</td>\n<td align=\"center\">Copies from one location to another.</td>\n<td align=\"center\">cp documents/file.txt desktop/file.txt</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>mv</code> command also doubles up as a way to rename a file for example:</p>\n<pre><code>mv myblogpostpage.html blog.html\n</code></pre>\n<h2>Deletion</h2>\n<p>Warning! do not pass trash go straight to remove.\nThese commands may not behave as you'd expect as it does not move the item to the trash but instead removes it straight away!</p>\n<p>This is one of those that's good to know but not always good to use especially when your new and may be pasting commands into terminal you don't entirely understand.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n<th align=\"center\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rm</td>\n<td align=\"center\">Deletes file at path.</td>\n<td align=\"center\">rm sites/old.css</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td align=\"center\">Deletes directory at path.</td>\n<td align=\"center\">rmdir old-photos</td>\n</tr>\n<tr>\n<td>rm -R</td>\n<td align=\"center\">Delete that folder, any sub-folders and files it contains.</td>\n<td align=\"center\">rm -R my-old-site</td>\n</tr>\n</tbody>\n</table>\n<h2>Modification</h2>\n<p>This is a tricky subject as some people actually prefer coding on the command line using programs like vim and emacs, I however do prefer to use a GUI based text editor for coding and for the context of this blog post modifying files in the terminal is mainly focused on quickly modifying text based documents where a more capable tool isn't required for example updating a config file, making a typo correction or adding small amount of content.</p>\n<p>There are many options for modifying text based files but I find the most user friendly is called nano, it comes preinstalled and has command hints at the bottom. Nano is a very basic editor compared to others which is exactly what makes it great for n00bs.</p>\n<p>To create or open an existing file just call nano followed by the filename.</p>\n<p><code>nano filename.txt</code></p>\n<p>You will then be able to type in the file, when your done press \"ctrl x\" if will then ask if you want to save the file \"save Y/N?\" type \"Y\" or \"N\" accordingly, if you chose the former it will ask you for the filename defaulting to the one provided, once your happy just press enter.</p>\n<p>{% include article-adsense.html %}</p>\n<h2>Opening</h2>\n<p>Not much to be said here, open a file or files.\nI commonly <code>cd</code> into a project and run <code>open . -a atom</code> to open my project inside the atom text editor.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n<th align=\"center\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>open</td>\n<td align=\"center\">Opens file at path using default application.</td>\n<td align=\"center\">open cv.doc</td>\n</tr>\n<tr>\n<td>open -a</td>\n<td align=\"center\">Opens file at path using specified application.</td>\n<td align=\"center\">open index.html -a firefox</td>\n</tr>\n</tbody>\n</table>\n<h2>Git</h2>\n<p>Git is one of the most important tools for a developer as it enables you to version control and collaborate with other developers effectively. I'm not going to rant about why you should be using git here but it is hands down he most crucial tool to manage code as a front end developer.</p>\n<p>The most common way to interact with git is to install and use the cli, the most common commands are:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git clone</td>\n<td align=\"center\">Clone an existing repository.</td>\n</tr>\n<tr>\n<td>git init</td>\n<td align=\"center\">Initialise the working directory as a git project.</td>\n</tr>\n<tr>\n<td>git add</td>\n<td align=\"center\">Add files to staging area.</td>\n</tr>\n<tr>\n<td>git commit -m</td>\n<td align=\"center\">Commit the staged files to the branch with a message.</td>\n</tr>\n<tr>\n<td>git push</td>\n<td align=\"center\">Push commits to the remote branch.</td>\n</tr>\n<tr>\n<td>git status</td>\n<td align=\"center\">Display current directory state and staging area.</td>\n</tr>\n<tr>\n<td>git log</td>\n<td align=\"center\">Displays the commit log.</td>\n</tr>\n</tbody>\n</table>\n<h2>Yarn</h2>\n<p>Yarn is a dependancy management tool built on top of npm which stands for \"node package manager\". As the name suggests it manages packages of javascript code that your project depends on.\nYarn is faster and better at managing dependancies across different environments and is an \"out of the box\" replacement for npm.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th align=\"center\">Summary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>yarn init</td>\n<td align=\"center\">Interactively creates or updates a package.json file.</td>\n</tr>\n<tr>\n<td>yarn install</td>\n<td align=\"center\">Installs dependancies.</td>\n</tr>\n<tr>\n<td>yarn add</td>\n<td align=\"center\">Adds a dependancy on a package.</td>\n</tr>\n<tr>\n<td>yarn remove</td>\n<td align=\"center\">Removes a dependancy on a package.</td>\n</tr>\n<tr>\n<td>yarn upgrade</td>\n<td align=\"center\">Updates a dependancy.</td>\n</tr>\n<tr>\n<td>yarn run</td>\n<td align=\"center\">Runs a defined package script.</td>\n</tr>\n</tbody>\n</table>\n<h2>SSH</h2>\n<p>It's very common to access a remote server to transfer files, the ssh command allows you to connect and authenticate with a remote host. You can then execute commands on the server directly from your local machine's terminal.</p>\n<p>To establish a connection you simply need to specify the correct ip address or url. The first time you connect to a new server there will be some form of authentication.</p>\n<pre><code class=\"language-bash\">ssh username@remote_host\n</code></pre>\n<h2>Writing shell scripts</h2>\n<p>Sometimes in your work flow you can find yourself repeating a lot of commands or stringing several commands together to perform a particular task.\nThis can disrupt you or make the work tedious, instead you can make shell scripts that contain repetitive tasks and then execute them.</p>\n<p>The most simple way to do this is to create a shell script file with the extension '.sh' and type your commands into it.</p>\n<p>Next you need to give it the executable permission <code>chmod +x ./yourscript.sh</code>.\nYou can then run it by typing the path into the command line <code>./yourscript.sh</code>.</p>\n<p>A word of warning, do not execute script that you do not know the contents or source of.</p>\n<h2>Conclusion</h2>\n<p>If you're a front end developer that shies away from the command line or uses it very little you are missing out and frankly being left behind, it can increase productivity and open up a plethora of tools to empower your development.</p>"}}]}}}
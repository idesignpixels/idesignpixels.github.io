{"data":{"markdownRemark":{"frontmatter":{"title":"Styling Input Range","date":"Feb 4th, 2018","image":{"childImageSharp":{"fluid":{"src":"/static/c811fa1db9788e5e3b51034187bc3dad/bc3a8/styling-input-range-LG.jpg","srcSet":"/static/c811fa1db9788e5e3b51034187bc3dad/d278e/styling-input-range-LG.jpg 200w,\n/static/c811fa1db9788e5e3b51034187bc3dad/8539d/styling-input-range-LG.jpg 400w,\n/static/c811fa1db9788e5e3b51034187bc3dad/bc3a8/styling-input-range-LG.jpg 800w,\n/static/c811fa1db9788e5e3b51034187bc3dad/81ef8/styling-input-range-LG.jpg 1200w,\n/static/c811fa1db9788e5e3b51034187bc3dad/f6605/styling-input-range-LG.jpg 1248w","tracedSVG":"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='400' height='109'%3e%3cpath d='M0 55v54h401V0H0v55m178-37l-1 22v22h46l-1-10V17h-22l-22 1m-15 60c-2 1-2 2-1 6l-1 4-1 2c0 2 1 3 5 3 6 0 8-5 1-6l-3-1 3-1c3-2 5-7 2-7h-5m110 0c-2 1-2 1-2 8v7h3c2 0 4 0 5-2s0-4-2-4c-4 0-4-1-2-2 1-1 3-2 3-4l1-2v-1h-6m-76 2v14l1-3c0-3 0-3 2-2 4 1 8-7 5-10-2-2-8-1-8 1' fill='%23d3d3d3' fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":3.6705882352941175,"sizes":"(max-width: 800px) 100vw, 800px"}}}},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"HTML5 input range fields are great but they looks different in every browser, in this post we style them to be uniform across browsers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The range input was introduced in HTML5 but the style differs wildly between browsers in this post I will talk about how to style this element to look the same in all modern browsers.\nThe idea is to have a friendly looking range input and label that responds to the users input, the user gets updated feedback on focus, hover, and change."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"text","value":"<div class=\"rangeWrapper\">\n  <div class=\"label\">\n    <span>Range </span>\n    <output id=\"rangeoutput\">0</output>\n  </div>\n  <input\n    id=\"rangeinput\"\n    type=\"range\"\n    value=\"0\"\n    min=0\n    max=100\n    oninput=\"rangeoutput.value = value\"\n  />\n</div>\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is my markup it is a wrapper thats contains a label div with an output container as a child and an input of type range.\nThe output element can be used to display the value of the range input by using the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"oninput"}]},{"type":"text","value":" attribute on the input element and using the id of the output element, in this case "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rangeoutput.value = value"}]},{"type":"text","value":".\nYou can also use the \"onchange\" attribute the same way but the downside to this is that it only updates when the user has released the slider, this means the user can’t see the current value whilst dragging, choose the best one for your use case."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"{% include article-adsense.html %}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to style the range input first you must remove the default browser styles, this is done with "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"appearance: none;"}]},{"type":"text","value":" on "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"input[type=“range”]"}]},{"type":"text","value":", you may need to add browser prefixes for older/unsupported browsers."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":".rangeWrapper {\n  position: relative;\n  width: 80%;\n  margin: auto;\n}\n\n.label {\n  font-family: sans-serif;\n  font-size: 1.5em;\n  color: #388E3C;\n  line-height: 2em;\n}\n\ninput[type=\"range\"] {\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  -ms-appearance: none;\n  width: 100%;\n  height: 25px;\n  padding: 3px;\n  border-radius: 15px;\n  background-color: #388E3C;\n  transition: background-color 0.25s ease;\n  outline: none;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This will make the component invisible but it's still there, now you just need to add your custom styles!\nStart by giving it 100% width, some height and a background-color, I have also added border radius.\nWe also want to animate the range track depending on whether its focused or being hovered upon, using css transitions you can easily apply these styles, I have added "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"transition: background-color 0.25s ease;"}]},{"type":"text","value":" this will animate the track color when it changes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":"input[type=\"range\"]:hover {\n  background-color: #4CAF50;\n}\n\ninput[type=\"range\"]:active {\n  background-color: #81C784;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I have set the background color of the track to be lighter on hover and even lighter on active, I like this effect as it feels like the element is waking up as you hover and awake as you use it before going back to sleep again."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now for the range 'thumb' this is the part that moves along the track, to style this you have to use some vender prefixes.\nGoing forward I will be using the "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-webkit"}]},{"type":"text","value":" prefix for examples but don't forget to add "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-moz"}]},{"type":"text","value":" & "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-ms"}]},{"type":"text","value":", look at the jsbin example for the full code."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":"input[type=\"range\"]::-webkit-slider-thumb {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 25px;\n  height: 25px;\n  background-color: white;\n  border-radius: 25px;\n  cursor: move;\n  transition: all 0.15s ease;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I've just Made a simple white circle for the thumb but you can do almost anything here even have a background image to add texture.\nThis does look a little boring though so to make it more interesting I've added some animations on "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":":hover"}]},{"type":"text","value":" & "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":":active"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-css"]},"children":[{"type":"text","value":"input[type=\"range\"]::-webkit-slider-thumb:hover {\n  height: 30px;\n  width: 30px;\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n  -webkit-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb:active {\n  height: 35px;\n  width: 35px;\n  box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n  -webkit-box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.5);\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I have animated the size of the thumb as well as increase the shadow, this gives the effect that it's rising to your finger/cursor when you interact with it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using whats shown here you can quickly theme and customise the range input so that it blends in with your website or apps UI without writing a single line of javascript!."}]}],"data":{"quirksMode":false}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"styling-input-range"}}